#include<MsTimer2.h>
#include<Arduino.h>
#include<ros.h>
#include<geometry_msgs/Twist.h>
ros::NodeHandle nh;

int count_time,n;

volatile boolean tim1msF = false;
void timer1mS(){
  tim1msF = true;
}
int Timer(int n){
  MsTimer2::set(1, timer1mS);
  MsTimer2::start();
  while(count_time <= n){
    if(tim1msF){
      count_time = count_time + 1;
      tim1msF = false;
    }
  }
  MsTimer2::stop();
  tim1msF = false;
  count_time = 0;
  return 0;
}



void Move_front(){
  digitalWrite(1, HIGH);
  digitalWrite(2, LOW);
  digitalWrite(3, LOW);
  digitalWrite(4, HIGH);
  digitalWrite(5, HIGH);
  digitalWrite(6, LOW);
  digitalWrite(7, LOW);
  digitalWrite(8, HIGH);
}

void Move_back(){
  digitalWrite(1, LOW);
  digitalWrite(2, HIGH);
  digitalWrite(3, HIGH);
  digitalWrite(4, LOW);
  digitalWrite(5, LOW);
  digitalWrite(6, HIGH);
  digitalWrite(7, HIGH);
  digitalWrite(8, LOW);
}

void Turn_right(){
  digitalWrite(1, HIGH);
  digitalWrite(2, LOW);
  digitalWrite(3, LOW);
  digitalWrite(4, HIGH);
  digitalWrite(5, LOW);
  digitalWrite(6, HIGH);
  digitalWrite(7, HIGH);
  digitalWrite(8, LOW);
}

void Turn_left(){
  digitalWrite(1, LOW);
  digitalWrite(2, HIGH);
  digitalWrite(3, HIGH);
  digitalWrite(4, LOW);
  digitalWrite(5, HIGH);
  digitalWrite(6, LOW);
  digitalWrite(7, LOW);
  digitalWrite(8, HIGH);
}

void Stop(){
  digitalWrite(1, LOW);
  digitalWrite(2, LOW);
  digitalWrite(3, LOW);
  digitalWrite(4, LOW);
  digitalWrite(5, LOW);
  digitalWrite(6, LOW);
  digitalWrite(7, LOW);
  digitalWrite(8, LOW);
}
void order1(const geometry_msgs::Twist &message){
  const float front_back = message.linear.x;
  const float right_left = message.angular.z;
  
  if(front_back >= 5.0){
    Move_front();}
  else if(front_back <= -5.0){
    Move_back();}
  else if(right_left <= -5.0){
    Turn_right();}
  else if(right_left >= 5.0){
    Turn_left();}
  else if(front_back == 0 && right_left==0){
    Stop();}
  nh.spinOnce();
}
ros::Subscriber<geometry_msgs::Twist> Destination("/control", &order1);

void setup() {
  pinMode(1,OUTPUT); 
  pinMode(2,OUTPUT); 
  pinMode(3,OUTPUT); 
  pinMode(4,OUTPUT); 
  pinMode(5,OUTPUT); 
  pinMode(6,OUTPUT); 
  pinMode(7,OUTPUT); 
  pinMode(8,OUTPUT);
  nh.initNode(); 
  nh.subscribe(Destination);
}

void loop() {
  nh.spinOnce();
  Timer(1);
}
